import numpy as np
import math
import random
import matplotlib.pyplot as plt
from scipy.stats import poisson
from scipy.stats import binom

x = 27
y = 18
z = 3
beta = 0.4
ns = np.arange(0,105,5)



#### Discard old votes
p_ns = [1]

# g_d = (1 - poisson.cdf(y-1,x))*(1 - poisson.cdf(0,z))
# p_a = (1 - poisson.cdf(y-1,beta*x))*(1 - poisson.cdf(0,beta*z))
# p_h = (1 - poisson.cdf(y-1,(1-beta)*x))*(1 - poisson.cdf(0,(1-beta)*z))
# print("Chain growth:", g_d)
# print("Honest chain growth:", p_h)
# print("Adv chain growth:", p_a)


# prob of balancing two chains
p_b = 1 - poisson.cdf(y-1,beta*x)
for a in range(y):
	p_b += poisson.pmf(a,beta*x)*(1-poisson.cdf(y-1-a,(1-beta)*x/2))**2
p_b *= (1 - poisson.cdf(0,beta*z))
print(p_b)

p_n = 1-p_b

for n in ns[1:]:
	p_n *= p_b
	p_ns.append(p_n)

print(p_ns)


# beta = 1/3
# 0.23112935235763643
# [1, 0.17770857483637598, 0.041073667810330144, 0.009493330239954306, 0.002194187270077804, 0.0005071410826844532, 0.00011721518999480821, 2.709187094997733e-05, 6.261726586824925e-06, 1.447268810653438e-06, 3.345063028937359e-07, 7.731422514737654e-08, 1.7869586786345628e-08, 4.130186020826643e-09, 9.546072201102254e-10, 2.206377485400001e-10, 5.0995859925697267e-11, 1.1786640077547154e-11, 2.7242384875960354e-12, 6.296514773058187e-13, 1.4553093816072288e-13]


# beta = 0.4
# 0.3259834067116702
# [1, 0.219718225260324, 0.07162449558700257, 0.023348397075456086, 0.007611190019913972, 0.0024811216518214217, 0.0008088044885268335, 0.00026365684253366715, 8.594775573196721e-05, 2.801754221272915e-05, 9.133253858193475e-06, 2.9772892070564143e-06, 9.705468784821372e-07, 3.1638217782098445e-07, 1.0313534014894194e-07, 3.3620409534118986e-08, 1.0959695634973624e-08, 3.5726789196117233e-09, 1.164634045301999e-09, 3.796513736599393e-10, 1.2376004814843226e-10]




